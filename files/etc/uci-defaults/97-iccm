#!/bin/sh

. /lib/functions.sh

default_2g=""

get_default_2g() {
    local section="$1"
    local band

    if [ -z "${default_2g}" ]; then
        config_get band "${section}" band
        if [ "${band}" = "2g" ]; then
            default_2g="${section}"
        fi
    fi
}

network() {
    # bat0: batman interface
    uci add network interface
    uci set network.@interface[-1].proto='batadv'
    uci set network.@interface[-1].routing_algo='BATMAN_IV'
    uci set network.@interface[-1].aggregated_ogms=1
    uci set network.@interface[-1].bridge_loop_avoidance=1
    uci set network.@interface[-1].hop_penalty=30
    uci rename network.@interface[-1]='bat0'

    # bat_hw0: fake physical interface to bind wireless
    uci add network interface
    uci set network.@interface[-1].proto='batadv_hardif'
    uci set network.@interface[-1].master='bat0'
    uci set network.@interface[-1].mtu=1536
    uci rename network.@interface[-1]='bat_hw0'

    # add bat0 to main bridge
    uci add_list network.@device[0].ports='bat0'
    # TODO: set bridge IP based on bat0 gw_mode
    uci set network.lan.ipaddr='192.168.8.1'
    uci set network.lan.netmask='255.255.255.0'

    uci commit network
}

wireless() {
    # mesh0: mesh wifi interface on default 2.4GHz device and batman network interface
    uci add wireless wifi-iface
    uci set wireless.@wifi-iface[-1].mode='mesh'
    uci set wireless.@wifi-iface[-1].device="${default_2g}"
    uci set wireless.@wifi-iface[-1].network='bat_hw0'
    uci set wireless.@wifi-iface[-1].mesh-id='iccm'
    # TODO: add encryption here
    uci set wireless.@wifi-iface[-1].encryption='none'
    uci set wireless.@wifi-iface[-1].mesh_fwding=0
    uci set wireless.@wifi-iface[-1].mesh_ttl=1
    uci set wireless.@wifi-iface[-1].mcast_rate=24000
    uci rename wireless.@wifi-iface[-1]=mesh0

    # wlan0: AP wifi interface on default 2.4GHz device
    uci add wireless wifi-iface
    uci set wireless.@wifi-iface[-1].mode='ap'
    uci set wireless.@wifi-iface[-1].device="${default_2g}"
    uci set wireless.@wifi-iface[-1].network='lan'
    uci set wireless.@wifi-iface[-1].encryption='none'
    uci set wireless.@wifi-iface[-1].ssid='ICCM Wi-Fi'
    uci set wireless.@wifi-iface[-1].disabled=0
    uci rename wireless.@wifi-iface[-1]=wlan0

    uci commit wireless
}

dhcp() {
    # add dns redirects to Quad9 servers
    uci add_list dhcp.@dnsmasq[0].server='9.9.9.9'
    uci add_list dhcp.@dnsmasq[0].server='142.112.112.112'

    # TODO: turn DHCP on/off based on bat0 gw_mode

    commit dhcp
}

dropbear() {
    # TODO: setup to disable password auth in production
    uci set dropbear.@dropbear[0].PasswordAuth=1
    uci set dropbear.@dropbear[0].RootPasswordAuth=1
    uci set dropbear.@dropbear[0].keyfile='/etc/dropbear/authorized_keys'

    uci commit dropbear
}

system() {
    uci set system.@system[0].hostname='ICCM'
    uci set system.@system[0].timezone='CST6CDT,M3.2.0,M11.1.0' # POSIX having a normal one as always

    uci commit system
}

network
# scan devices for 2GHz radio
if [ -z "${default_2g}" ] ; then
    config_load wireless
    config_foreach get_default_2g "wifi-device"
fi
wireless
dhcp
dropbear
system
