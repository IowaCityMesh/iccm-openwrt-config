#!/bin/sh

# get first wifi-device operating on each band
# TODO: handle tri-/quad-band routers gracefully
get_default_wifi() {
    local section="$1"
    local band

    if [ -z "${default_2g}" ] || [ -z "${default_5g}" ]; then
        config_get band "${section}" band
        if [ "${band}" = "2g" ]; then
            default_2g="${section}"
        elif [ "${band}" = "5g" ]; then
            default_5g="${section}"
        fi
    fi
}

network() {
    # bat0: batman interface
    if [ -z "$(uci -q get network.bat0)" ]; then
        uci add network interface
        uci set network.@interface[-1].proto='batadv'
        uci set network.@interface[-1].routing_algo='BATMAN_IV'
        uci set network.@interface[-1].aggregated_ogms=1
        uci set network.@interface[-1].bridge_loop_avoidance=1
        uci set network.@interface[-1].hop_penalty=30
        uci rename network.@interface[-1]='bat0'
    fi

    # bat_hw0: fake physical interface to bind wireless
    if [ -z "$(uci -q get network.bat_hw0)" ]; then
        uci add network interface
        uci set network.@interface[-1].proto='batadv_hardif'
        uci set network.@interface[-1].master='bat0'
        uci set network.@interface[-1].mtu=1536
        uci rename network.@interface[-1]='bat_hw0'
    fi

    # add bat0 to main bridge, avoiding duplicates
    uci del_list network.device[0].ports='bat0'
    uci add_list network.device[0].ports='bat0'

    if [ "${nodetype}" = 'server' ]; then
        # class A subnet
        uci set network.lan.ipaddr='10.0.0.1'
        uci set network.lan.netmask='255.0.0.0'

        uci set network.bat0.gw_mode='server'
        uci set network.bat0.gw_bandwidth='10000/2000'
    else
        # class C subnet
        uci set network.lan.ipaddr='192.168.8.1'
        uci set network.lan.netmask='255.255.255.0'

        uci set network.bat0.gw_mode='client'
        uci set network.bat0.gw_sel_class=20
    fi

    uci commit network
}

wireless() {
    # delete all autogenerated WiFi interfaces
    while uci -q delete wireless.@wifi-iface[0]; do :; done

    # mesh0: mesh wifi interface on default 2.4GHz device and batman network interface
    if [ -z "$(uci -q get wireless.mesh0)" ]; then
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].mode='mesh'
        uci set wireless.@wifi-iface[-1].device="${default_2g}"
        uci set wireless.@wifi-iface[-1].network='bat_hw0'
        uci set wireless.@wifi-iface[-1].mesh_id='iccm'
        # TODO: add encryption here
        uci set wireless.@wifi-iface[-1].encryption='none'
        uci set wireless.@wifi-iface[-1].mesh_fwding=0
        uci set wireless.@wifi-iface[-1].mesh_ttl=1
        uci set wireless.@wifi-iface[-1].mcast_rate=24000
        uci rename wireless.@wifi-iface[-1]=mesh0
    fi

    # wlan0: AP wifi interface on default 2.4GHz device
    if [ -z "$(uci -q get wireless.wlan0)" ]; then
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].mode='ap'
        uci set wireless.@wifi-iface[-1].device="${default_2g}"
        uci set wireless.@wifi-iface[-1].network='lan'
        uci set wireless.@wifi-iface[-1].encryption='none'
        uci set wireless.@wifi-iface[-1].ssid='ICCM Wi-Fi'
        uci set wireless.@wifi-iface[-1].disabled=0
        uci rename wireless.@wifi-iface[-1]=wlan0
    fi

    # wlan1: AP wifi interface on default 5GHz device
    if [ -z "$(uci -q get wireless.wlan1)" ] && [ -n "${default_5g}" ]; then
        uci add wireless wifi-iface
        uci set wireless.@wifi-iface[-1].mode='ap'
        uci set wireless.@wifi-iface[-1].device="${default_5g}"
        uci set wireless.@wifi-iface[-1].network='lan'
        uci set wireless.@wifi-iface[-1].encryption='none'
        uci set wireless.@wifi-iface[-1].ssid='ICCM Wi-Fi'
        uci set wireless.@wifi-iface[-1].disabled=0
        uci rename wireless.@wifi-iface[-1]=wlan1
    fi

    uci commit wireless
}

dhcp() {
    # add dns redirects to Quad9 servers
    uci delete dhcp.@dnsmasq[0].server
    uci add_list dhcp.@dnsmasq[0].server='9.9.9.9'
    uci add_list dhcp.@dnsmasq[0].server='142.112.112.112'
    uci add_list dhcp.@dnsmasq[0].server='2620:fe::fe'
    uci add_list dhcp.@dnsmasq[0].server='2620:fe::9'

    if [ "${nodetype}" = 'client' ]; then
        # turn off DHCP
        uci set dhcp.lan.ignore=1
    fi

    commit dhcp
}

# TODO: firewall rules to manage bat0 traffic

dropbear() {
    # TODO: setup to disable password auth in production
    uci set dropbear.@dropbear[0].PasswordAuth=1
    uci set dropbear.@dropbear[0].RootPasswordAuth=1
    # uci set dropbear.@dropbear[0].keyfile='/etc/dropbear/authorized_keys'

    uci commit dropbear
}

system() {
    uci set system.@system[0].hostname='ICCM'
    uci set system.@system[0].timezone='CST6CDT,M3.2.0,M11.1.0' # POSIX having a normal one as always

    uci commit system
}

default_2g=""
default_5g=""

# read node type from $(TOPDIR)/files/etc/iccm.nodetype, default to 'client'
nodetype="client"
if [ -f /etc/iccm.nodetype ]; then
    nodetype=$(cat iccm.nodetype)
fi

# shellcheck disable=1091
. /lib/functions.sh
# shellcheck source=./98-iccm-device
. ./98-iccm-device

# set default devices if not set by 98-iccm-device
if [ -z "${default_2g}" ] || [ -z "${default_5g}" ]; then
    config_load wireless
    config_foreach get_default_wifi "wifi-device"
fi

# deanonymize br-lan for readability
# OOPS this does nothing because UCI is bad
if [ "$(uci get network.@device[0].name)" = 'br-lan' ]; then
    uci rename network.@device[0]='br-lan'
fi

network
wireless
dhcp
dropbear
system